import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import socket
from ipwhois import IPWhois

def load_data(file_path):
    """
    Load CSV file into a pandas DataFrame.
    """
    df = pd.read_csv(file_path)
    return df

def preprocess_data(df):
    """
    Preprocess data: Clean, convert types, and filter relevant columns.
    """
    df.dropna(inplace=True)
    df.drop_duplicates(inplace=True)
    df['Time'] = pd.to_datetime(df['Time'])
    df['Length'] = pd.to_numeric(df['Length'], errors='coerce')
    return df

def clustering_analysis(df):
    """
    Perform clustering analysis to identify groups of similar traffic.
    """
    print("Performing clustering analysis...")
    features = ['Length']
    X = df[features].values

    # Standardize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Apply KMeans clustering
    kmeans = KMeans(n_clusters=3)
    df['Cluster'] = kmeans.fit_predict(X_scaled)

    plt.scatter(df['Time'], df['Length'], c=df['Cluster'], cmap='viridis')
    plt.title('Clustering Analysis')
    plt.xlabel('Time')
    plt.ylabel('Length')
    plt.show()

def outlier_detection(df):
    """
    Perform outlier detection to identify anomalous traffic.
    """
    print("Performing outlier detection...")
    features = ['Length']
    X = df[features].values

    # Standardize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Apply Isolation Forest
    isolation_forest = IsolationForest(contamination=0.01)  # 1% contamination
    df['Anomaly'] = isolation_forest.fit_predict(X_scaled)

    anomalies = df[df['Anomaly'] == -1]

    plt.scatter(df['Time'], df['Length'], c=df['Anomaly'], cmap='coolwarm')
    plt.title('Outlier Detection')
    plt.xlabel('Time')
    plt.ylabel('Length')
    plt.show()

    return anomalies

def analyze_quic_traffic(df):
    """
    Analyze QUIC traffic for unusual patterns.
    """
    print("Analyzing QUIC traffic...")
    quic_traffic = df[df['Protocol'].str.contains('QUIC', case=False, na=False)]

    if quic_traffic.empty:
        print("No QUIC traffic detected.")
        return

    # Output details of QUIC traffic
    print("QUIC Traffic Details:")
    print(quic_traffic[['Time', 'Source', 'Destination', 'Protocol', 'Length', 'Info']])

    return quic_traffic

def extract_dns_queries(df):
    """
    Extract DNS queries to list visited destinations.
    """
    print("Extracting DNS queries...")
    dns_traffic = df[df['Protocol'].str.contains('DNS', case=False, na=False)].copy()
    dns_traffic.loc[:, 'Queried_Domain'] = dns_traffic['Info'].str.extract(r'(\b(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z]{2,6}\b)')

    visited_domains = dns_traffic['Queried_Domain'].dropna().unique()
    print("Visited Domains:")
    for domain in visited_domains:
        print(domain)

    return visited_domains

def analyze_ip_traffic_volume(df):
    """
    Analyze IP traffic volume to identify any IPs with high traffic.
    """
    print("Analyzing IP traffic volume...")
    
    # Calculate total traffic volume to and from each IP address
    ip_traffic = df.groupby('Source')['Length'].sum().reset_index()
    ip_traffic.columns = ['IP', 'Total_Traffic']

    dest_traffic = df.groupby('Destination')['Length'].sum().reset_index()
    dest_traffic.columns = ['IP', 'Total_Traffic']

    total_traffic = pd.concat([ip_traffic, dest_traffic]).groupby('IP')['Total_Traffic'].sum().reset_index()

    # Sort by total traffic volume in descending order
    total_traffic = total_traffic.sort_values(by='Total_Traffic', ascending=False)

    print("IP Traffic Volume:")
    print(total_traffic.head(10))  # Display top 10 IPs by traffic volume

    return total_traffic

def identify_suspicious_ports(df):
    """
    Identify suspicious or unusual ports being used.
    """
    print("Identifying suspicious ports...")
    ports = df['Info'].str.extract(r'\b(\d{1,5})\b')[0].dropna().astype(int)
    common_ports = [20, 21, 22, 23, 25, 53, 80, 110, 143, 443, 993, 995]
    
    unusual_ports = ports[~ports.isin(common_ports)].value_counts()
    print("Unusual Ports:")
    print(unusual_ports.head(10))  # Display top 10 unusual ports

def analyze_time_patterns(df):
    """
    Analyze traffic patterns over time.
    """
    print("Analyzing traffic patterns over time...")
    df.set_index('Time', inplace=True)
    df['Hour'] = df.index.hour

    traffic_by_hour = df.groupby('Hour')['Length'].sum()
    traffic_by_hour.plot(kind='bar', title='Traffic Volume by Hour')
    plt.xlabel('Hour of the Day')
    plt.ylabel('Total Traffic Volume')
    plt.show()

def geolocation_analysis(df):
    """
    Perform geolocation analysis of IP addresses.
    """
    print("Performing geolocation analysis...")
    ips = pd.concat([df['Source'], df['Destination']]).unique()
    
    geo_info = {}
    for ip in ips:
        try:
            obj = IPWhois(ip)
            res = obj.lookup_rdap(asn_methods=['whois', 'http'])
            country = res['network']['country']
            geo_info[ip] = country
        except Exception as e:
            geo_info[ip] = 'Unknown'
    
    df['Source_Country'] = df['Source'].map(geo_info)
    df['Destination_Country'] = df['Destination'].map(geo_info)

    print("Geolocation Analysis:")
    print(df[['Source', 'Source_Country', 'Destination', 'Destination_Country']].drop_duplicates().head(10))

def main():
    file_path = 'interesting.csv'  # Using the specified CSV file name
    
    df = load_data(file_path)
    df = preprocess_data(df)
    
    clustering_analysis(df)
    
    anomalies = outlier_detection(df)
    if not anomalies.empty:
        print("Anomalies detected:")
        print(anomalies[['Time', 'Source', 'Destination', 'Protocol', 'Length', 'Info']])
    else:
        print("No anomalies detected.")
    
    quic_traffic = analyze_quic_traffic(df)
    if quic_traffic is not None:
        print("QUIC traffic analysis completed.")

    visited_domains = extract_dns_queries(df)
    if visited_domains.size > 0:
        print("Visited domains analysis completed.")

    total_traffic = analyze_ip_traffic_volume(df)
    if not total_traffic.empty:
        print("IP traffic volume analysis completed.")

    identify_suspicious_ports(df)
    analyze_time_patterns(df)
    geolocation_analysis(df)

if __name__ == "__main__":
    main()
